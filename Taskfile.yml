version: '2'

vars:
  SRC_DIR: .
  SPEC_DIR: spec
  CONFIG_DIR: config
  BUILD_DIR: build
  LOCAL_DIR: local
  MOCKS_DIR: mocks
  BINARY_NAME: bin
  GENERATED_DIR: internal/generated
  CF_DIR: cf
  CF_MANIFEST_DEV: manifest.dev.yml
  CF_MANIFEST_PROD: manifest.dev.yml
  CF_ORG: "Audi beta space"
  CF_SPACE_DEV: DEV
  CF_SPACE_PROD: PROD

tasks:
  ## Helpers  
  builder:
    silent: true
    dir: "{{.SRC_DIR}}"
    cmds:
      - |
        {{.ENVS}} go build {{.FLAGS}} -o {{.TARGET}} .
        echo "Successfully built $(file {{.TARGET}}) --> $(stat -f "%z" {{.TARGET}} | awk '{printf "%.2f MB", $1/(1024*1024)}')"
  
  clean:
    silent: true
    cmds:
      - echo "Cleaning '{{.PATH}}'"
      - rm -rf {{.PATH}}
      - mkdir -p {{.PATH}}

  ## Build tasks
  build.local:
    desc: build local
    silent: true
    vars:
      TARGET: "{{.BUILD_DIR}}/{{.LOCAL_DIR}}/{{.BINARY_NAME}}"
    sources:
      - "{{.SRC_DIR}}/**/*.{go}"
      - "{{.SRC_DIR}}/go.mod"
    generates:
      - "{{.TARGET}}"
    cmds:
      - task: clean
        vars: {PATH: "{{.BUILD_DIR}}/{{.LOCAL_DIR}}"}
      - task: builder
        vars:
          TARGET: "{{.TARGET}}"
          ENVS: ""
          FLAGS: ""

  build.cf:
    desc: build cf
    silent: true
    vars:
      TARGET: "{{.BUILD_DIR}}/{{.CF_DIR}}/{{.BINARY_NAME}}"
    sources:
      - "{{.SRC_DIR}}/**/*.{go}"
      - "{{.SRC_DIR}}/go.mod"
    generates:
      - "{{.TARGET}}"
    cmds:
      - task: clean
        vars: {PATH: "{{.BUILD_DIR}}/{{.CF_DIR}}"}
      - task: builder
        vars:
          TARGET: "{{.TARGET}}"
          ENVS: CGO_ENABLED=0 GOOS=linux GOARCH=amd64
          FLAGS: -a -ldflags '-extldflags "-static"'

  build:
    desc: build all
    silent: true
    deps: [build.local, build.cf]

  ## Deploy tasks

  deploy.dev:
    desc: deploy on dev
    dir: "{{.BUILD_DIR}}/{{.CF_DIR}}"
    cmds:
      - cf target -s "{{.CF_SPACE_DEV}}" -o "{{.CF_ORG}}"
      - cf push -f ../../{{.CF_MANIFEST_DEV}}

  ## Genfig task to generate go files from configuration files

  genfig:
    desc: genfig
    vars:
      GENFIG_TARGET_DIR: "{{.SRC_DIR}}/{{.GENERATED_DIR}}/config"
      GENFIG_SOURCES: "{{.CONFIG_DIR}}/*.yml"
      GENFIG_TARGETS: "{{.GENFIG_TARGET_DIR}}/*.go"
    sources:
      - "{{.GENFIG_SOURCES}}"
    generates:
      - "{{.GENFIG_TARGETS}}"
    cmds:
      - genfig --dir "{{.GENFIG_TARGET_DIR}}" {{.GENFIG_SOURCES}}

  ## Mocks task to generate go mocks via mockery

  mocks:
    desc: mocks
    dir: "internal"
    vars:
      MOCKS_TARGET_DIR: "generated/{{.MOCKS_DIR}}"
      MOCKS_SOURCES: "{{.SRC_DIR}}/internal/*.go"
      MOCKS_TARGETS: "{{.MOCKS_TARGET_DIR}}/*.go"
    sources:
      - "{{.MOCKS_SOURCES}}"
    generates:
      - "{{.MOCKS_TARGETS}}"
    cmds:
      - mockery -all -outpkg {{.MOCKS_DIR}} -output "{{.MOCKS_TARGET_DIR}}"

  ## swagger tasks to generate swagger doc from comments in go files --> REST only

  spec.install:
    dir: "{{.SRC_DIR}}"
    cmds:
      - go get -u github.com/go-swagger/go-swagger/cmd/swagger
    status:
      - which swagger

  spec.json:
    dir: "{{.SRC_DIR}}"
    cmds:
      - mkdir -p $(dirname "{{.OUTPUT}}")
      - swagger generate spec -o "{{.OUTPUT}}" -w "{{.WORKDIR}}"
  
  spec.go:
    dir: "{{.SRC_DIR}}"
    vars:
      TEMPLATE_START: "// Code generated by swagger; DO NOT EDIT.\n\npackage spec\n\nconst Swagger = `"
      TEMPLATE_END: "`\n"
    cmds: 
      - |
        echo '{{.TEMPLATE_START}}' > {{.OUTPUT}}
        cat {{.INPUT}} >> {{.OUTPUT}}
        echo '{{.TEMPLATE_END}}' >> {{.OUTPUT}}
      - rm {{.INPUT}}

  spec:
    dir: "{{.SRC_DIR}}"
    desc: swagger
    vars:
      TARGET_JSON: "{{.GENERATED_DIR}}/{{.SPEC_DIR}}/swagger.json"
      TARGET_GO: "{{.GENERATED_DIR}}/{{.SPEC_DIR}}/swagger.go"
      WORKDIR: internal/delivery
    sources:
      - "{{.WOKDIR}}/**/*.go"
    generates:
      - "{{.TARGET_GO}}"
    cmds:
      - task: spec.install
      - task: spec.json
        vars:
          WORKDIR: "{{.WORKDIR}}"
          OUTPUT: "{{.TARGET_JSON}}"
      - task: spec.go
        vars:
          OUTPUT: "{{.TARGET_GO}}"
          INPUT: "{{.TARGET_JSON}}"
